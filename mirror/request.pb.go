// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: request.proto

/*
	Package mirror is a generated protocol buffer package.

	It is generated from these files:
		request.proto

	It has these top-level messages:
		Request
		HeaderValues
*/
package mirror

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/types"
import _ "github.com/gogo/protobuf/gogoproto"

import time "time"

import strconv "strconv"

import bytes "bytes"

import strings "strings"
import reflect "reflect"
import sortkeys "github.com/gogo/protobuf/sortkeys"

import types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Method int32

const (
	GET     Method = 0
	HEAD    Method = 1
	POST    Method = 2
	PUT     Method = 3
	PATCH   Method = 4
	DELETE  Method = 5
	CONNECT Method = 6
	OPTIONS Method = 7
	TRACE   Method = 8
)

var Method_name = map[int32]string{
	0: "GET",
	1: "HEAD",
	2: "POST",
	3: "PUT",
	4: "PATCH",
	5: "DELETE",
	6: "CONNECT",
	7: "OPTIONS",
	8: "TRACE",
}
var Method_value = map[string]int32{
	"GET":     0,
	"HEAD":    1,
	"POST":    2,
	"PUT":     3,
	"PATCH":   4,
	"DELETE":  5,
	"CONNECT": 6,
	"OPTIONS": 7,
	"TRACE":   8,
}

func (Method) EnumDescriptor() ([]byte, []int) { return fileDescriptorRequest, []int{0} }

type HTTPVersion int32

const (
	V1_0 HTTPVersion = 0
	V1_1 HTTPVersion = 1
	V2   HTTPVersion = 2
)

var HTTPVersion_name = map[int32]string{
	0: "V1_0",
	1: "V1_1",
	2: "V2",
}
var HTTPVersion_value = map[string]int32{
	"V1_0": 0,
	"V1_1": 1,
	"V2":   2,
}

func (HTTPVersion) EnumDescriptor() ([]byte, []int) { return fileDescriptorRequest, []int{1} }

type Request struct {
	Time        time.Time               `protobuf:"bytes,1,opt,name=Time,stdtime" json:"time"`
	Method      Method                  `protobuf:"varint,2,opt,name=Method,proto3,enum=mirror.Method" json:"method"`
	Path        string                  `protobuf:"bytes,3,opt,name=Path,proto3" json:"path"`
	HTTPVersion HTTPVersion             `protobuf:"varint,4,opt,name=HTTPVersion,proto3,enum=mirror.HTTPVersion" json:"http_version"`
	Headers     map[string]HeaderValues `protobuf:"bytes,5,rep,name=Headers" json:"headers" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	Body        []byte                  `protobuf:"bytes,6,opt,name=Body,proto3" json:"body"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptorRequest, []int{0} }

func (m *Request) GetTime() time.Time {
	if m != nil {
		return m.Time
	}
	return time.Time{}
}

func (m *Request) GetMethod() Method {
	if m != nil {
		return m.Method
	}
	return GET
}

func (m *Request) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Request) GetHTTPVersion() HTTPVersion {
	if m != nil {
		return m.HTTPVersion
	}
	return V1_0
}

func (m *Request) GetHeaders() map[string]HeaderValues {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *Request) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type HeaderValues struct {
	Values []string `protobuf:"bytes,2,rep,name=Values" json:"values"`
}

func (m *HeaderValues) Reset()                    { *m = HeaderValues{} }
func (*HeaderValues) ProtoMessage()               {}
func (*HeaderValues) Descriptor() ([]byte, []int) { return fileDescriptorRequest, []int{1} }

func (m *HeaderValues) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

func init() {
	proto.RegisterType((*Request)(nil), "mirror.Request")
	proto.RegisterType((*HeaderValues)(nil), "mirror.HeaderValues")
	proto.RegisterEnum("mirror.Method", Method_name, Method_value)
	proto.RegisterEnum("mirror.HTTPVersion", HTTPVersion_name, HTTPVersion_value)
}
func (x Method) String() string {
	s, ok := Method_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x HTTPVersion) String() string {
	s, ok := HTTPVersion_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Request) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Request)
	if !ok {
		that2, ok := that.(Request)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Time.Equal(that1.Time) {
		return false
	}
	if this.Method != that1.Method {
		return false
	}
	if this.Path != that1.Path {
		return false
	}
	if this.HTTPVersion != that1.HTTPVersion {
		return false
	}
	if len(this.Headers) != len(that1.Headers) {
		return false
	}
	for i := range this.Headers {
		a := this.Headers[i]
		b := that1.Headers[i]
		if !(&a).Equal(&b) {
			return false
		}
	}
	if !bytes.Equal(this.Body, that1.Body) {
		return false
	}
	return true
}
func (this *HeaderValues) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HeaderValues)
	if !ok {
		that2, ok := that.(HeaderValues)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if this.Values[i] != that1.Values[i] {
			return false
		}
	}
	return true
}
func (this *Request) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&mirror.Request{")
	s = append(s, "Time: "+fmt.Sprintf("%#v", this.Time)+",\n")
	s = append(s, "Method: "+fmt.Sprintf("%#v", this.Method)+",\n")
	s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	s = append(s, "HTTPVersion: "+fmt.Sprintf("%#v", this.HTTPVersion)+",\n")
	keysForHeaders := make([]string, 0, len(this.Headers))
	for k, _ := range this.Headers {
		keysForHeaders = append(keysForHeaders, k)
	}
	sortkeys.Strings(keysForHeaders)
	mapStringForHeaders := "map[string]HeaderValues{"
	for _, k := range keysForHeaders {
		mapStringForHeaders += fmt.Sprintf("%#v: %#v,", k, this.Headers[k])
	}
	mapStringForHeaders += "}"
	if this.Headers != nil {
		s = append(s, "Headers: "+mapStringForHeaders+",\n")
	}
	s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HeaderValues) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&mirror.HeaderValues{")
	s = append(s, "Values: "+fmt.Sprintf("%#v", this.Values)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRequest(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRequest(dAtA, i, uint64(types.SizeOfStdTime(m.Time)))
	n1, err := types.StdTimeMarshalTo(m.Time, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if m.Method != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Method))
	}
	if len(m.Path) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRequest(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if m.HTTPVersion != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.HTTPVersion))
	}
	if len(m.Headers) > 0 {
		for k, _ := range m.Headers {
			dAtA[i] = 0x2a
			i++
			v := m.Headers[k]
			msgSize := 0
			if (&v) != nil {
				msgSize = (&v).Size()
				msgSize += 1 + sovRequest(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovRequest(uint64(len(k))) + msgSize
			i = encodeVarintRequest(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintRequest(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintRequest(dAtA, i, uint64((&v).Size()))
			n2, err := (&v).MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n2
		}
	}
	if len(m.Body) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintRequest(dAtA, i, uint64(len(m.Body)))
		i += copy(dAtA[i:], m.Body)
	}
	return i, nil
}

func (m *HeaderValues) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeaderValues) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, s := range m.Values {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func encodeVarintRequest(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Request) Size() (n int) {
	var l int
	_ = l
	l = types.SizeOfStdTime(m.Time)
	n += 1 + l + sovRequest(uint64(l))
	if m.Method != 0 {
		n += 1 + sovRequest(uint64(m.Method))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	if m.HTTPVersion != 0 {
		n += 1 + sovRequest(uint64(m.HTTPVersion))
	}
	if len(m.Headers) > 0 {
		for k, v := range m.Headers {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovRequest(uint64(len(k))) + 1 + l + sovRequest(uint64(l))
			n += mapEntrySize + 1 + sovRequest(uint64(mapEntrySize))
		}
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	return n
}

func (m *HeaderValues) Size() (n int) {
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, s := range m.Values {
			l = len(s)
			n += 1 + l + sovRequest(uint64(l))
		}
	}
	return n
}

func sovRequest(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRequest(x uint64) (n int) {
	return sovRequest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Request) String() string {
	if this == nil {
		return "nil"
	}
	keysForHeaders := make([]string, 0, len(this.Headers))
	for k, _ := range this.Headers {
		keysForHeaders = append(keysForHeaders, k)
	}
	sortkeys.Strings(keysForHeaders)
	mapStringForHeaders := "map[string]HeaderValues{"
	for _, k := range keysForHeaders {
		mapStringForHeaders += fmt.Sprintf("%v: %v,", k, this.Headers[k])
	}
	mapStringForHeaders += "}"
	s := strings.Join([]string{`&Request{`,
		`Time:` + strings.Replace(strings.Replace(this.Time.String(), "Timestamp", "google_protobuf.Timestamp", 1), `&`, ``, 1) + `,`,
		`Method:` + fmt.Sprintf("%v", this.Method) + `,`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`HTTPVersion:` + fmt.Sprintf("%v", this.HTTPVersion) + `,`,
		`Headers:` + mapStringForHeaders + `,`,
		`Body:` + fmt.Sprintf("%v", this.Body) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HeaderValues) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HeaderValues{`,
		`Values:` + fmt.Sprintf("%v", this.Values) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringRequest(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := types.StdTimeUnmarshal(&m.Time, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			m.Method = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Method |= (Method(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HTTPVersion", wireType)
			}
			m.HTTPVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HTTPVersion |= (HTTPVersion(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Headers == nil {
				m.Headers = make(map[string]HeaderValues)
			}
			var mapkey string
			mapvalue := &HeaderValues{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRequest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRequest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRequest
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRequest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthRequest
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthRequest
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &HeaderValues{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRequest(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRequest
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Headers[mapkey] = *mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = append(m.Body[:0], dAtA[iNdEx:postIndex]...)
			if m.Body == nil {
				m.Body = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeaderValues) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeaderValues: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeaderValues: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRequest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRequest
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRequest
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRequest(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRequest = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRequest   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("request.proto", fileDescriptorRequest) }

var fileDescriptorRequest = []byte{
	// 535 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x52, 0x4f, 0x8f, 0xd2, 0x4e,
	0x18, 0xee, 0xb4, 0xa5, 0x85, 0x81, 0xdf, 0xfe, 0x26, 0xa3, 0x87, 0x86, 0x6c, 0xda, 0x86, 0x53,
	0x25, 0x5a, 0xa4, 0x5e, 0x8c, 0x27, 0x29, 0xdb, 0x80, 0x89, 0x42, 0xd3, 0x1d, 0xb9, 0x12, 0x90,
	0x4a, 0xd1, 0xed, 0x0e, 0x96, 0x42, 0xc2, 0xcd, 0x8f, 0xb0, 0xdf, 0xc0, 0xab, 0x1f, 0x65, 0x8f,
	0x7b, 0xf4, 0x84, 0x52, 0x2f, 0x86, 0xd3, 0x7e, 0x04, 0xd3, 0x19, 0xaa, 0x78, 0x7b, 0xdf, 0xe7,
	0x79, 0x9f, 0xe7, 0xfd, 0x33, 0x03, 0xff, 0x4b, 0xc2, 0x4f, 0xeb, 0x70, 0x95, 0xda, 0xcb, 0x84,
	0xa6, 0x14, 0x2b, 0xf1, 0x22, 0x49, 0x68, 0x52, 0x37, 0xe6, 0x94, 0xce, 0xaf, 0xc2, 0x16, 0x43,
	0xa7, 0xeb, 0xf7, 0xad, 0x74, 0x11, 0x87, 0xab, 0x74, 0x12, 0x2f, 0x79, 0x61, 0xfd, 0xc9, 0x7c,
	0x91, 0x46, 0xeb, 0xa9, 0xfd, 0x8e, 0xc6, 0xad, 0x39, 0x9d, 0xd3, 0xbf, 0x95, 0x79, 0xc6, 0x12,
	0x16, 0xf1, 0xf2, 0xc6, 0x17, 0x09, 0xaa, 0x01, 0xef, 0x84, 0x5f, 0x42, 0x99, 0x2c, 0xe2, 0x50,
	0x03, 0x26, 0xb0, 0xaa, 0x4e, 0xdd, 0xe6, 0xad, 0xec, 0xc2, 0xc0, 0x26, 0x45, 0x2b, 0x17, 0xdd,
	0xee, 0x0c, 0xe1, 0xb0, 0x33, 0xe4, 0xbc, 0xfb, 0xcd, 0x77, 0x03, 0x04, 0x4c, 0x89, 0x1d, 0xa8,
	0xbc, 0x09, 0xd3, 0x88, 0xce, 0x34, 0xd1, 0x04, 0xd6, 0x99, 0x73, 0x66, 0xf3, 0xb1, 0x6d, 0x8e,
	0xba, 0xf0, 0xb0, 0x33, 0x94, 0x98, 0xc5, 0xc1, 0xb1, 0x12, 0x9f, 0x43, 0xd9, 0x9f, 0xa4, 0x91,
	0x26, 0x99, 0xc0, 0xaa, 0xb8, 0xe5, 0xdc, 0x75, 0x39, 0x49, 0xa3, 0x80, 0xa1, 0xb8, 0x07, 0xab,
	0x7d, 0x42, 0xfc, 0x51, 0x98, 0xac, 0x16, 0xf4, 0x5a, 0x93, 0x99, 0xed, 0x83, 0xc2, 0xf6, 0x84,
	0x72, 0xd1, 0x61, 0x67, 0xd4, 0xa2, 0x34, 0x5d, 0x8e, 0x37, 0x1c, 0x09, 0x4e, 0x95, 0xb8, 0x07,
	0xd5, 0x7e, 0x38, 0x99, 0x85, 0xc9, 0x4a, 0x2b, 0x99, 0x92, 0x55, 0x75, 0xce, 0x0b, 0x93, 0xe3,
	0xfa, 0xf6, 0x91, 0xf6, 0xae, 0xd3, 0x64, 0xeb, 0xfe, 0x7f, 0xdc, 0x50, 0x8d, 0x38, 0x1a, 0x14,
	0xea, 0x7c, 0x5e, 0x97, 0xce, 0xb6, 0x9a, 0x62, 0x02, 0xab, 0xc6, 0xe7, 0x9d, 0xd2, 0xd9, 0x36,
	0x60, 0x68, 0xdd, 0x87, 0xb5, 0x53, 0x1f, 0x8c, 0xa0, 0xf4, 0x31, 0xdc, 0xb2, 0x93, 0x56, 0x82,
	0x3c, 0xc4, 0x4d, 0x58, 0xda, 0x4c, 0xae, 0xd6, 0x21, 0x3b, 0x51, 0xd5, 0x79, 0xf8, 0x67, 0x17,
	0x26, 0x1b, 0xe5, 0xd4, 0x2a, 0xe0, 0x25, 0x2f, 0xc4, 0xe7, 0xa0, 0xe1, 0x14, 0x8e, 0x9c, 0xc2,
	0x0d, 0xa8, 0xf0, 0x48, 0x13, 0x4d, 0xc9, 0xaa, 0xf0, 0x9b, 0x6e, 0xb8, 0xec, 0xc8, 0x34, 0x3f,
	0x14, 0xef, 0x80, 0x55, 0x28, 0xf5, 0x3c, 0x82, 0x04, 0x5c, 0x86, 0x72, 0xdf, 0xeb, 0x5c, 0x20,
	0x90, 0x47, 0xfe, 0xf0, 0x92, 0x20, 0x31, 0x27, 0xfd, 0xb7, 0x04, 0x49, 0xb8, 0x02, 0x4b, 0x7e,
	0x87, 0x74, 0xfb, 0x48, 0xc6, 0x10, 0x2a, 0x17, 0xde, 0x6b, 0x8f, 0x78, 0xa8, 0x84, 0xab, 0x50,
	0xed, 0x0e, 0x07, 0x03, 0xaf, 0x4b, 0x90, 0x92, 0x27, 0x43, 0x9f, 0xbc, 0x1a, 0x0e, 0x2e, 0x91,
	0x9a, 0x0b, 0x48, 0xd0, 0xe9, 0x7a, 0xa8, 0xdc, 0x7c, 0xf4, 0xcf, 0x0b, 0xe5, 0xee, 0xa3, 0xf6,
	0xf8, 0x29, 0xef, 0x38, 0x6a, 0x8f, 0xdb, 0x08, 0x60, 0x05, 0x8a, 0x23, 0x07, 0x89, 0xee, 0xe3,
	0xbb, 0xbd, 0x2e, 0x7c, 0xdb, 0xeb, 0xc2, 0xfd, 0x5e, 0x07, 0x9f, 0x33, 0x1d, 0x7c, 0xcd, 0x74,
	0x70, 0x9b, 0xe9, 0xe0, 0x2e, 0xd3, 0xc1, 0x8f, 0x4c, 0x07, 0xbf, 0x32, 0x5d, 0xb8, 0xcf, 0x74,
	0x70, 0xf3, 0x53, 0x17, 0xa6, 0x0a, 0xfb, 0x78, 0xcf, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0x2a,
	0x27, 0x6f, 0x50, 0x0a, 0x03, 0x00, 0x00,
}
